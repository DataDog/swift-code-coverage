####
# LLVM build
####

.SECONDARY:

export MACOSX_DEPLOYMENT_TARGET := 10.13
export IPHONEOS_DEPLOYMENT_TARGET := 11.0
export TVOS_DEPLOYMENT_TARGET := 11.0
export PATH := $(PWD)/llvm/build/tools/bin:$(PATH)

CMAKE_ARGS := -G "Ninja" \
		-DLLVM_TARGETS_TO_BUILD="AArch64;X86" \
		-DLLVM_BUILD_TOOLS=OFF \
		-DCLANG_BUILD_TOOLS=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DLLVM_ENABLE_ZLIB=ON \
		-DLLVM_ENABLE_THREADS=ON \
		-DLLVM_ENABLE_UNWIND_TABLES=OFF \
		-DLLVM_ENABLE_EH=OFF \
		-DLLVM_ENABLE_RTTI=OFF \
		-DLLVM_ENABLE_ZSTD=OFF \
		-DLLVM_ENABLE_FFI=OFF \
		-DLLVM_ENABLE_TERMINFO=OFF \
		-DLLVM_DISABLE_ASSEMBLY_FILES=ON \
		-DCMAKE_BUILD_TYPE=Release

llvm/build/tools/bin/cmake:
	@curl -L -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.0/cmake-3.31.0-macos-universal.tar.gz
	@tar xzf cmake.tar.gz
	@mkdir -p llvm/build/tools/bin llvm/build/tools/doc llvm/build/tools/man llvm/build/tools/share
	@cd cmake-* && \
	 mv CMake.app/Contents/bin/* ../llvm/build/tools/bin/ && \
	 mv CMake.app/Contents/doc/* ../llvm/build/tools/doc/ && \
	 mv CMake.app/Contents/man/* ../llvm/build/tools/man/ && \
	 mv CMake.app/Contents/share/* ../llvm/build/tools/share/
	@rm -rf cmake*
	
llvm/build/tools/bin/ninja:
	@mkdir -p llvm/build/tools/bin
	@curl -OL https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-mac.zip
	@unzip ninja-mac.zip
	@mv ninja llvm/build/tools/bin/
	@rm ninja-mac.zip

llvm_tools: llvm/build/tools/bin/cmake llvm/build/tools/bin/ninja

clean_llvm_tools:
	@rm -rf llvm/build/tools
	@mkdir -p llvm/build/tools

llvm/build/src/llvm-%.tar.xz:
	@mkdir -p llvm/build/src
	@curl -L -o "$@" https://github.com/llvm/llvm-project/releases/download/llvmorg-$*/llvm-project-$*.src.tar.xz
	
clean_llvm_sources:
	@rm -rf llvm/build/src
	@mkdir -p llvm/build/src

llvm/build/src/llvm-%: llvm/build/src/llvm-%.tar.xz
	@rm -f "llvm/build/src/llvm$*"
	@tar xzf $<
	@cd llvm-project-$*.src ;\
	 for patch in "$(PWD)/llvm/patches/$*"/*; do \
		if [[ "$$patch" == *.diff ]]; then \
			echo "Applying patch: $$patch" ;\
			git apply --ignore-space-change --ignore-whitespace "$$patch" ;\
		fi \
	 done
	@cp llvm-project-$*.src/llvm/cmake/platforms/iOS.cmake llvm-project-$*.src/llvm/cmake/platforms/tvOS.cmake
	@sed -i.bak 's/iphoneos/appletvos/' llvm-project-$*.src/llvm/cmake/platforms/tvOS.cmake
	@cp llvm-project-$*.src/llvm/cmake/platforms/iOS.cmake llvm-project-$*.src/llvm/cmake/platforms/macOS.cmake
	@sed -i.bak 's/iphoneos/macosx/' llvm-project-$*.src/llvm/cmake/platforms/macOS.cmake
	@mv llvm-project-$*.src $@
	@touch -am $@
	@xcrun SetFile -d "$$(xcrun GetFileInfo -m $@)" $@

llvm/build/src/llvm15: llvm/build/src/llvm-15.0.0 llvm_tools
	@cd $(dir $@) && ln -s $(notdir $<) $(notdir $@)

llvm/build/src/llvm17: llvm/build/src/llvm-17.0.6 llvm_tools
	@cd $(dir $@) && ln -s $(notdir $<) $(notdir $@)

llvm/build/libs/llvm%/macosx: llvm/build/src/llvm%
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64;x86_64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/macOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib

llvm/build/libs/llvm%/iphoneos: llvm/build/src/llvm%
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/iOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib

llvm/build/libs/llvm%/iphonesimulator: llvm/build/src/llvm%
	$(eval SYSROOT = $(shell xcodebuild -version -sdk iphonesimulator Path))
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64;x86_64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/iOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
				-DCMAKE_OSX_SYSROOT="$(SYSROOT)")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib

llvm/build/libs/llvm%/appletvos: llvm/build/src/llvm%
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/tvOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib
	
llvm/build/libs/llvm%/appletvsimulator: llvm/build/src/llvm%
	$(eval SYSROOT = $(shell xcodebuild -version -sdk appletvsimulator Path))
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64;x86_64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/tvOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
				-DCMAKE_OSX_SYSROOT="$(SYSROOT)")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib
	
llvm/build/libs/llvm%/maccatalyst: llvm/build/src/llvm%
	$(eval SYSROOT = $(shell xcodebuild -version -sdk macosx Path))
	$(eval CMAKE_ARGS_PL = $(CMAKE_ARGS) \
				-DCMAKE_INSTALL_PREFIX="$(PWD)/$@" \
				-DLLVM_TARGET_ARCH="arm64;x86_64" \
				-DCMAKE_TOOLCHAIN_FILE="$(PWD)/$</llvm/cmake/platforms/iOS.cmake" \
				-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
				-DCMAKE_OSX_SYSROOT="$(SYSROOT)" \
				-DCMAKE_OSX_DEPLOYMENT_TARGET="" \
				-DCMAKE_C_FLAGS="-target arm64-apple-ios14.0-macabi" \
				-DCMAKE_CXX_FLAGS="-target arm64-apple-ios14.0-macabi")
	@mkdir -p llvm/build/build llvm/build/libs
	@cd llvm/build/build && cmake $(CMAKE_ARGS_PL) "$(PWD)/$</llvm"
	@env cmake --build llvm/build/build
	@env cmake --install llvm/build/build
	@mv "$@/include/llvm" "$@/include/llvm$*"
	@mv "$@/include/llvm-c" "$@/include/llvm$*-c"
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm/|#include \"llvm$*/|" {} \;
	@find "$@/include" -type f -exec sed -i "" "s|#include \"llvm-c/|#include \"llvm$*-c/|" {} \;
	@libtool -static -o $@/llvm$*.a $@/lib/*.a
	@rm -rf llvm/build/build $@/bin $@/share $@/lib

llvm/xcframeworks/LLVM%.xcframework: llvm/build/libs/llvm%/macosx llvm/build/libs/llvm%/maccatalyst \
									 llvm/build/libs/llvm%/iphoneos llvm/build/libs/llvm%/iphonesimulator \
									 llvm/build/libs/llvm%/appletvos llvm/build/libs/llvm%/appletvsimulator
	$(eval LIBS = $(foreach plfm,$^,-library "$(plfm)/llvm$*.a" -headers "$(plfm)/include"))
	@mkdir -p llvm/xcframeworks
	@xcodebuild -create-xcframework $(LIBS) -output $@

build: llvm/xcframeworks/LLVM15.xcframework llvm/xcframeworks/LLVM17.xcframework

llvm%_prebuilt_xcframework:
	$(eval PLATFORMS = $(wildcard llvm/build/libs/llvm$*/*))
	$(eval LIBS = $(foreach plfm,$(PLATFORMS),-library "$(plfm)/llvm$*.a" -headers "$(plfm)/include"))
	@mkdir -p llvm/xcframeworks
	@xcodebuild -create-xcframework $(LIBS) -output llvm/xcframeworks/LLVM$*.xcframework

llvm_prebuilt: llvm15_prebuilt_xcframework llvm17_prebuilt_xcframework

clean_llvm_libs:
	@rm -rf llvm/build/libs llvm/xcframeworks
	@mkdir -p llvm/build/libs llvm/xcframeworks

clean: clean_llvm_sources clean_llvm_tools clean_llvm_libs
